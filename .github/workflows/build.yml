name: AutoBuild

on:
  push:
    branches: [master]
    paths-ignore:
      - "README.md"
      - "LICENSE"
  pull_request:
    branches: [master]
    paths-ignore:
      - "README.md"
      - "LICENSE"
  workflow_dispatch:
  schedule:
    - cron: "0 22 * * *" # Runs at 22:00 UTC every day

env:
  ARIA2_REF: AutoBuild

jobs:
  create_release:
    runs-on: windows-2019
    steps:
      # delete old release
      - uses: dev-drprasad/delete-tag-and-release@v1.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          delete_release: true # default: false
          tag_name: ${{ env.ARIA2_REF }}-Nightly # tag name to delete

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ env.ARIA2_REF }}-Nightly
          release_name: ${{ env.ARIA2_REF }}-Nightly
          body: |
            ${{ env.ARIA2_REF }}-Nightly
          draft: false
          prerelease: true

  build-windows:
    needs: create_release
    env:
      HOST: x86_64-w64-mingw32
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3.5.2
      - name: Setup
        run: |
          sudo apt-get update && \
          sudo apt-get install -y \
          make binutils autoconf automake autotools-dev libtool \
          patch ca-certificates libcppunit-dev autopoint  lzip \
          pkg-config curl dpkg-dev gcc-mingw-w64 g++-mingw-w64 && \
          curl -L -O https://gmplib.org/download/gmp/gmp-6.2.1.tar.lz && \
          curl -L -O https://github.com/libexpat/libexpat/releases/download/R_2_4_1/expat-2.4.1.tar.bz2 && \
          curl -L -O https://www.sqlite.org/2021/sqlite-autoconf-3360000.tar.gz && \
          curl -L -O https://zlib.net/fossils/zlib-1.2.11.tar.gz && \
          curl -L -O https://c-ares.haxx.se/download/c-ares-1.17.2.tar.gz && \
          curl -L -O https://www.libssh2.org/download/libssh2-1.9.0.tar.gz && \
          curl -L -O https://github.com/libssh2/libssh2/commit/ba149e804ef653cc05ed9803dfc94519ce9328f7.patch
      - name: Apply patch
        run: |
          sudo git apply patch/*.patch
      - name: Build gmp
        run: |
          tar xf gmp-6.2.1.tar.lz && \
          cd gmp-6.2.1 && \
          ./configure \
          --disable-shared \
          --enable-static \
          --prefix=/usr/local/$HOST \
          --host=$HOST \
          --disable-cxx \
          --enable-fat \
          CFLAGS="-mtune=generic -O2 -g0" && \
          sudo make -j"$(nproc 2> /dev/null || sysctl -n hw.ncpu)" install
      - name: Build expat
        run: |
          tar xf expat-2.4.1.tar.bz2 && \
          cd expat-2.4.1 && \
          ./configure \
          --disable-shared \
          --enable-static \
          --prefix=/usr/local/$HOST \
          --host=$HOST \
          --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE` && \
          sudo make -j"$(nproc 2> /dev/null || sysctl -n hw.ncpu)" install
      - name: Build sqlite
        run: |
          tar xzvf sqlite-autoconf-3360000.tar.gz && \
          cd sqlite-autoconf-3360000 && \
          ./configure \
          --disable-shared \
          --enable-static \
          --prefix=/usr/local/$HOST \
          --host=$HOST \
          --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE` && \
          sudo make -j"$(nproc 2> /dev/null || sysctl -n hw.ncpu)" install
      - name: Build zlib
        run: |
          tar xf zlib-1.2.11.tar.gz && \
          cd zlib-1.2.11 && \
          CC=$HOST-gcc \
          AR=$HOST-ar \
          LD=$HOST-ld \
          RANLIB=$HOST-ranlib \
          STRIP=$HOST-strip \
          ./configure \
          --prefix=/usr/local/$HOST \
          --libdir=/usr/local/$HOST/lib \
          --includedir=/usr/local/$HOST/include \
          --static && \
          sudo make -j"$(nproc 2> /dev/null || sysctl -n hw.ncpu)" install
      - name: Build c-ares
        run: |
          tar xf c-ares-1.17.2.tar.gz && \
          cd c-ares-1.17.2 && \
          ./configure \
          --disable-shared \
          --enable-static \
          --without-random \
          --prefix=/usr/local/$HOST \
          --host=$HOST \
          --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE` \
          LIBS="-lws2_32" && \
          sudo make -j"$(nproc 2> /dev/null || sysctl -n hw.ncpu)" install
      - name: Build libssh
        run: |
          tar xf libssh2-1.9.0.tar.gz && \
          cd libssh2-1.9.0 && \
          patch -p1 < ../ba149e804ef653cc05ed9803dfc94519ce9328f7.patch && \
          ./configure \
          --disable-shared \
          --enable-static \
          --prefix=/usr/local/$HOST \
          --host=$HOST \
          --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE` \
          --without-openssl \
          --with-wincng \
          LIBS="-lws2_32" && \
          sudo make -j"$(nproc 2> /dev/null || sysctl -n hw.ncpu)" install
      - name: Configure autotools
        run: |
          autoreconf -i && \
          ./mingw-config ARIA2_STATIC=yes
      - name: Build aria2
        run: |
          sudo make -j"$(nproc 2> /dev/null || sysctl -n hw.ncpu)" && \
          sudo $HOST-strip src/aria2c.exe
          sudo cp src/aria2c.exe src/aria2c-release-Windows-x86_64.exe
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.ARIA2_REF }}-Nightly
          name: ${{ env.ARIA2_REF }}-Nightly
          body: TODO New Release.
          draft: false  # 是否是草稿
          prerelease: true # 是否是预览版
          files: src/aria2c-release-Windows-x86_64.exe

  build:
    needs: create_release
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-11]
        # os: [macos-11]
        compiler: [gcc, clang]
        # compiler: [gcc]

    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3
      - name: Apply patch
        run: |
          sudo git apply patch/*.patch
      - name: Linux setup
        if: runner.os == 'Linux'
        run: |
          sudo apt-get install \
            g++-11 \
            clang-12 \
            autoconf \
            automake \
            autotools-dev \
            autopoint \
            libtool \
            pkg-config \
            libcppunit-dev \
            libssl-dev \
            dpkg-dev \
            lzip \
            curl
      - name: MacOS setup
        if: runner.os == 'macOS'
        run: |
          brew install cppunit autoconf automake pkg-config \
          libtool curl lzip dpkg
      - name: Setup clang (Linux)
        if: runner.os == 'Linux' && matrix.compiler == 'clang'
        run: |
          echo 'CC=clang-12' >> $GITHUB_ENV
          echo 'CXX=clang++-12' >> $GITHUB_ENV
      - name: Setup clang (MacOS)
        if: runner.os == 'macOS' && matrix.compiler == 'clang'
        run: |
          echo 'CC=clang' >> $GITHUB_ENV
          echo 'CXX=clang++' >> $GITHUB_ENV
      - name: Setup gcc (Linux)
        if: runner.os == 'Linux' && matrix.compiler == 'gcc'
        run: |
          echo 'CC=gcc-11' >> $GITHUB_ENV
          echo 'CXX=g++-11' >> $GITHUB_ENV
      - name: Setup gcc (MacOS)
        if: runner.os == 'macOS' && matrix.compiler == 'gcc'
        run: |
          echo 'CC=gcc' >> $GITHUB_ENV
          echo 'CXX=g++' >> $GITHUB_ENV
      - name: Setup download
        run: |
          curl -L -O https://www.openssl.org/source/old/1.1.1/openssl-1.1.1g.tar.gz && \
          curl -L -O https://github.com/libexpat/libexpat/releases/download/R_2_4_1/expat-2.4.1.tar.bz2 && \
          curl -L -O https://www.sqlite.org/2021/sqlite-autoconf-3360000.tar.gz && \
          curl -L -O https://zlib.net/fossils/zlib-1.2.11.tar.gz && \
          curl -L -O https://c-ares.haxx.se/download/c-ares-1.17.2.tar.gz && \
          curl -L -O https://www.libssh2.org/download/libssh2-1.9.0.tar.gz && \
          curl -L -O https://github.com/libssh2/libssh2/commit/ba149e804ef653cc05ed9803dfc94519ce9328f7.patch
      - name: Build expat
        run: |
          tar xf expat-2.4.1.tar.bz2 && \
          cd expat-2.4.1 && \
          ./configure \
          --disable-shared \
          --enable-static \
          --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE` && \
          sudo make -j"$(nproc 2> /dev/null || sysctl -n hw.ncpu)" install
      - name: Build sqlite
        run: |
          tar xzvf sqlite-autoconf-3360000.tar.gz && \
          cd sqlite-autoconf-3360000 && \
          ./configure \
          --disable-shared \
          --enable-static \
          --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE` && \
          sudo make -j"$(nproc 2> /dev/null || sysctl -n hw.ncpu)" install
      - name: Build zlib
        run: |
          tar xf zlib-1.2.11.tar.gz && \
          cd zlib-1.2.11 && \
          ./configure \
          --static && \
          sudo make -j"$(nproc 2> /dev/null || sysctl -n hw.ncpu)" install
      - name: Build c-ares
        run: |
          tar xf c-ares-1.17.2.tar.gz && \
          cd c-ares-1.17.2 && \
          ./configure \
          --disable-shared \
          --enable-static \
          --without-random \
          --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE` && \
          sudo make -j"$(nproc 2> /dev/null || sysctl -n hw.ncpu)" install
      - name: Build openssl
        if: runner.os == 'macOS'
        run: |
          tar xf openssl-1.1.1g.tar.gz && \
          cd openssl-1.1.1g && \
          ./config no-shared zlib \
          CFLAGS="-mtune=generic -O2 -g0" && \
          sudo make -j"$(nproc 2> /dev/null || sysctl -n hw.ncpu)" && sudo make install
      - name: Build libssh
        run: |
          tar xf libssh2-1.9.0.tar.gz && \
          cd libssh2-1.9.0 && \
          patch -p1 < ../ba149e804ef653cc05ed9803dfc94519ce9328f7.patch && \
          ./configure \
          --disable-shared \
          --enable-static \
          --build=`dpkg-architecture -qDEB_BUILD_GNU_TYPE` \
          --with-crypto=openssl \
          --with-wincng && \
          sudo make -j"$(nproc 2> /dev/null || sysctl -n hw.ncpu)" install
      - name: Configure autotools (Linux)
        if: runner.os == 'Linux'
        run: |
          autoreconf -i && \
          ./configure \
          ARIA2_STATIC=yes
      - name: Configure autotools (macOS)
        if: runner.os == 'macOS'
        run: | # --without-included-gettext --without-openssl
          autoreconf -i && \
          ./configure \
          --without-gnutls \
          --without-appletls \
          --with-openssl \
          --disable-nls \
          --without-libgcrypt \
          --without-libxml2 \
          --without-libgmp \
          ARIA2_STATIC=yes \
          LDFLAGS="-framework Security -framework CoreFoundation"
          CPPFLAGS="-fsanitize=address" LDFLAGS="-fsanitize=address"
      - name: Build aria2
        run: |
          make -j"$(nproc 2> /dev/null || sysctl -n hw.ncpu)" && \
          strip src/aria2c
          cp src/aria2c src/aria2c-release-$(uname -s)-$(uname -m)
      - name: Upload Release Asset
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.ARIA2_REF }}-Nightly
          name: ${{ env.ARIA2_REF }}-Nightly
          body: TODO New Release.
          draft: false  # 是否是草稿
          prerelease: true # 是否是预览版
          files: src/aria2c-release-*
